<?xml version="1.0" encoding="utf-8" ?>
<Patch>
  <Operation Class="PatchOperationSequence">
    <success>Always</success>
    <!--this part adds a component if not already there. pre-requisite-->
    <operations>
      <li Class="PatchOperationConditional">
        <xpath>/Defs/ThingDef[defName = "Human"]/comps</xpath>
        <success>Always</success>
        <nomatch Class="PatchOperationAdd">
          <xpath>/Defs/ThingDef[defName = "Human"]</xpath>
          <value>
            <comps />
          </value>
        </nomatch>
      </li>
      <li Class="PatchOperationAdd">
        <xpath>/Defs/ThingDef[defName = "Human"]/comps</xpath>
        <value>
          <li Class = "PawnPlus.CompProperties_BodyAnimator">
            <!--needed for everything with hands-->
            <bipedWithHands>true</bipedWithHands>
            <!--which hand texture?-->
            <handType>Human</handType>
            <!--custom drawers can be used here-->
            <bodyDrawers>
              <li Class ="PawnPlus.HumanBipedDrawer"/>
            </bodyDrawers>
          </li>
          <li Class = "PawnPlus.CompProperties_Face">
            <!--if false, vanilla heads are used, otherwise the FS blank texture is used-->
            <needsBlankHumanHead>true</needsBlankHumanHead>
            <!-- off = no mouth-->
            <hasMouth>true</hasMouth>
            <!--race can have beards?-->
            <hasBeard>true</hasBeard>
            <!--race can have wrinkles?-->
            <hasWrinkles>true</hasWrinkles>
            <!--head rotation / tracking-->
            <canRotateHead>true</canRotateHead>
						
			<!-- 
			Since this class is defined within CompProperties, it will be only instantiated once and shared 
			among multiple CompFace instances. However, this behavior is not desired - there need to be 
			separate instances of the behavior class for each CompFace instance. Therefore, during initialization
			the instance will be cloned so each instance can have its own member variable for the CompFace
			that it is associated with. Same goes for other behavior classes. Doing so also allows configurable member 
			variables like the following.
			-->
			<headBehavior Class = "PawnPlus.AI.HumanHeadBehavior">
				<!-- The amount of ticks needed for the recipient of social interaction to wait before moving its head -->
				<socialRecipientDelayTick>30</socialRecipientDelayTick>
				<!-- How long the social interaction lasts in ticks -->
				<socialDurationTick>240</socialDurationTick>
				<!-- The speed that pawn can rotate head. Unit in deg/tick ( = degrees per 1/60 of second) -->
				<headRotationRate>10</headRotationRate>
			</headBehavior>
			
			<partBehaviors>
				<li Class = "PawnPlus.AI.HumanEyeBehavior">
					<blinkCloseTicks>6</blinkCloseTicks>
					<blinkOpenAverageTicks>200</blinkOpenAverageTicks>
					<blinkOpenMaxRandOffsetTicks>50</blinkOpenMaxRandOffsetTicks>
				</li>
			</partBehaviors>
			
			<!-- Class must be PawnPlus.PartGenHelper or its subclass -->
			<partGenHelper Class="PawnPlus.PartGenHelper"></partGenHelper>
			
			<!-- 
			This determines what mouth texture is displayed under what circumstances 
			Look at PawnPlus.AI.HumanMouth to see how it is implemented.
			-->
			<mouthBehavior Class = "PawnPlus.AI.HumanMouthBehavior">
				<!-- Set public member variables if needed -->
			</mouthBehavior>
          </li>
        </value>
      </li>
    </operations>
  </Operation>

</Patch>
